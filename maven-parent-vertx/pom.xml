<?xml version="1.0" encoding="UTF-8"?>

<!-- ============================================================================ -->
<!--  Copyright ©  2015-2020,    Cristiano V. Gavião			                  -->
<!--                                                                              -->
<!--  All rights reserved.                                                        -->
<!--  This program and the accompanying materials are made available under        -->
<!--  the terms of the Eclipse Public License v1.0 which accompanies this         -->
<!--  distribution and is available at http://www.eclipse.org/legal/epl-v10.html  -->
<!--                                                                              -->
<!-- ============================================================================ -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>br.com.c8tech.releng</groupId>
		<artifactId>maven-parent-java</artifactId>
		<version>8.1-SNAPSHOT</version>
	</parent>

	<artifactId>maven-parent-vertx</artifactId>
	<name>C8Tech maven parent Vert.x POM.</name>
	<description>A parent POM for Vert.x based projects.</description>
	<packaging>pom</packaging>

    <!-- Due a maven limitation, this MUST be replicated to all children -->
	<url>${c8tech.project.site.url}</url>
	<scm>
		<connection>${c8tech.scm.connection}</connection>
		<developerConnection>${c8tech.scm.connection.dev}</developerConnection>
		<url>${c8tech.scm.url}</url>
		<tag>HEAD</tag>
	</scm>
	<distributionManagement>
		<site>
			<id>${c8tech.distribution.site.id}</id>
			<name>${c8tech.distribution.site.name}</name>
			<url>${c8tech.distribution.site.url}</url>
		</site>
	</distributionManagement>
    <!-- end of per child setting -->

	<properties>
		<vertx.version>4.0.0-SNAPSHOT</vertx.version>
		<vertx-maven-plugin.version>1.0.22</vertx-maven-plugin.version>
		<swagger-parser.version>2.0.19</swagger-parser.version>
		<dockerfile-maven.version>1.4.13</dockerfile-maven.version>
		<graalvm.image.tag>20.0.0-java11</graalvm.image.tag>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-stack-depchain</artifactId>
				<version>${vertx.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>io.swagger.parser.v3</groupId>
				<artifactId>swagger-parser-v3</artifactId>
				<version>${swagger-parser.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-docgen</artifactId>
				<version>3.5.1</version>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<profiles>
        <!-- ======================== -->
        <!--      Vert.x PROFILES     -->
        <!-- ======================== -->

		<profile>
            <!-- profile used to setup a maven based bundle development project -->
            <!-- it is activated when a .c8tech.releng.bundle file where found. -->
			<id>when-building-vertx-jar-inside-eclipse</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
				<file>
					<exists>.c8tech.releng.vertx</exists>
				</file>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>io.reactiverse</groupId>
							<artifactId>vertx-maven-plugin</artifactId>
							<version>${vertx-maven-plugin.version}</version>
							<configuration>
								<runMode>exploded</runMode>
								<redeploy>true</redeploy>
								<vertx.directory>${project.build.directory}/run</vertx.directory>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
		<profile>
			<id>when-building-vertx-jar-outside-eclipse</id>
			<activation>
				<property>
					<name>!m2e.version</name>
				</property>
				<file>
					<exists>.c8tech.releng.vertx</exists>
				</file>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>io.reactiverse</groupId>
							<artifactId>vertx-maven-plugin</artifactId>
							<version>${vertx-maven-plugin.version}</version>
							<configuration>
								<runMode>jar</runMode>
								<redeploy>false</redeploy>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<profile>
            <!-- profile used to setup a maven based bundle development project -->
            <!-- it is activated when a .c8tech.releng.vertx file where found. -->
			<id>when-building-vertx-jar</id>
			<activation>
				<file>
					<exists>.c8tech.releng.vertx</exists>
				</file>
			</activation>
			<properties>
				<vertx.build.directory>${project.build.directory}</vertx.build.directory>
			</properties>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-compiler-plugin</artifactId>
							<version>${maven-compiler.version}</version>
							<inherited>true</inherited>
							<configuration>
								<annotationProcessorPaths
									combine.children="append">
									<path>
										<groupId>io.vertx</groupId>
										<artifactId>vertx-codegen</artifactId>
										<version>${vertx.version}</version>
										<classifier>processor</classifier>
									</path>
								</annotationProcessorPaths>
							</configuration>
						</plugin>
						<plugin>
							<groupId>io.reactiverse</groupId>
							<artifactId>vertx-maven-plugin</artifactId>
							<version>${vertx-maven-plugin.version}</version>
							<configuration>
								<mode>exploded</mode>
								<launcher>${vertx.launcher}</launcher>
								<verticle>${vertx.verticle}</verticle>
								<vertxVersion>${vertx.version}</vertxVersion>
								<projectGroupId>${project.groupId}</projectGroupId>
								<projectArtifactId>${project.artifactId}</projectArtifactId>
								<projectBuildDir>${vertx.build.directory}</projectBuildDir>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<plugin>
						<groupId>io.reactiverse</groupId>
						<artifactId>vertx-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>vmp</id>
								<goals>
									<goal>initialize</goal>
									<goal>package</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>

			<dependencies>
				<dependency>
					<groupId>io.vertx</groupId>
					<artifactId>vertx-codegen</artifactId>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>io.vertx</groupId>
					<artifactId>vertx-core</artifactId>
				</dependency>
				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>jul-to-slf4j</artifactId>
					<version>${slf4j.version}</version>
				</dependency>
				<dependency>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-classic</artifactId>
					<version>${logback.version}</version>
					<scope>compile</scope>
				</dependency>
				<dependency>
					<groupId>io.vertx</groupId>
					<artifactId>vertx-junit5</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

        <!-- ======================== -->
        <!--      Docker PROFILES     -->
        <!-- ======================== -->

		<profile>
			<id>build-docker-image</id>
			<activation>
				<file>
					<exists>.c8tech.releng.docker</exists>
				</file>
				<property>
					<name>doBuildDocker</name>
				</property>
			</activation>
			<properties>
				<c8tech.docker.userid>anUser</c8tech.docker.userid>
				<c8tech.docker.source.directory>
					${basedir}/src/main/docker
				</c8tech.docker.source.directory>
				<c8tech.docker.source.directory.filtering>
					${basedir}/src/main/docker-filtering
				</c8tech.docker.source.directory.filtering>
				<c8tech.docker.context.directory>
					${project.build.directory}/docker-context
				</c8tech.docker.context.directory>
				<c8tech.docker.image.name>
					${project.artifactId}
				</c8tech.docker.image.name>
				<c8tech.docker.image.tag>
					${project.version}
				</c8tech.docker.image.tag>
				<vertx.build.directory>${c8tech.docker.context.directory}</vertx.build.directory>
				<c8tech.docker.port>8082</c8tech.docker.port>
				<c8tech.docker.registryAddress>localhost:32000</c8tech.docker.registryAddress>
			</properties>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>com.spotify</groupId>
							<artifactId>dockerfile-maven-plugin</artifactId>
							<version>${dockerfile-maven.version}</version>
							<configuration>
								<pullNewerImage>false</pullNewerImage>
<!-- 								<verbose>true</verbose> -->
								<noCache>false</noCache>
								<googleContainerRegistryEnabled>false</googleContainerRegistryEnabled>
								<dockerfile>${c8tech.docker.context.directory}/${c8tech.dockerfile.name}</dockerfile>
								<repository>${c8tech.docker.image.namespace}${c8tech.docker.image.name}</repository>
								<tag>${c8tech.docker.image.tag}</tag>
								<useMavenSettingsForAuth>true</useMavenSettingsForAuth>
								<contextDirectory>${c8tech.docker.context.directory}</contextDirectory>
								<buildArgs>
									<SOURCE_JAR_FILE>${project.build.finalName}.jar</SOURCE_JAR_FILE>
									<SOURCE_CONFIG_DIR>${c8tech.app.configuration.dirName}</SOURCE_CONFIG_DIR>
									<APP_HTTP_PORT>${c8tech.docker.port}</APP_HTTP_PORT>
									<APP_MAIN_VERTICLE>${c8tech.app.main.verticle}</APP_MAIN_VERTICLE>
								</buildArgs>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>timestamp-property</id>
								<goals>
									<goal>timestamp-property</goal>
								</goals>
								<configuration>
									<name>build-date</name>
									<pattern>yyyy-MM-dd</pattern>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>${maven-resources.version}</version>
						<executions>
							<execution>
								<id>copy-docker-resources</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${c8tech.docker.context.directory}</outputDirectory>
									<encoding>UTF-8</encoding>
									<resources>
										<resource>
											<directory>${c8tech.docker.source.directory}</directory>
											<targetPath>
												${c8tech.docker.context.directory}
											</targetPath>
											<filtering>false</filtering>
											<includes>
												<include>**/*</include>
											</includes>
										</resource>
										<resource>
											<directory>${c8tech.docker.source.directory.filtering}</directory>
											<filtering>true</filtering>
											<targetPath>
												${c8tech.docker.context.directory}
											</targetPath>
											<includes>
												<include>**/*</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
						<version>${dockerfile-maven.version}</version>
						<executions>
							<execution>
								<id>default</id>
								<phase>install</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>build-docker-image-with-jdk11</id>
			<activation>
				<file>
					<exists>.c8tech.releng.docker</exists>
				</file>
				<property>
					<name>withJdk11</name>
				</property>
			</activation>
			<properties>
				<c8tech.dockerfile.name>Dockerfile.jdk11</c8tech.dockerfile.name>
				<c8tech.docker.jdkImage>x86_64-alpine-jre-11.0.7_10</c8tech.docker.jdkImage>
				<c8tech.docker.image.tag>
					${project.version}-jdk11
				</c8tech.docker.image.tag>
			</properties>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>com.spotify</groupId>
							<artifactId>dockerfile-maven-plugin</artifactId>
							<version>${dockerfile-maven.version}</version>
							<configuration>
								<buildArgs combine.children="append">
									<JDK_TAG>${c8tech.docker.jdkImage}</JDK_TAG>
									<APP_PROJECT_ID>${project.artifactId}</APP_PROJECT_ID>
									<APP_PROJECT_VERSION>${project.version}</APP_PROJECT_VERSION>
									<APP_BUILD_DATE>${build-date}</APP_BUILD_DATE>
								</buildArgs>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<profile>
			<id>build-docker-image-with-graalvm-config</id>
			<activation>
				<file>
					<exists>.c8tech.releng.docker</exists>
				</file>
				<property>
					<name>withGraalvmConfig</name>
				</property>
			</activation>
			<properties>
				<c8tech.dockerfile.name>Dockerfile.native-image</c8tech.dockerfile.name>
				<c8tech.docker.image.tag>${project.version}-config</c8tech.docker.image.tag>
				<c8tech.docker.configDir></c8tech.docker.configDir>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>${maven-resources.version}</version>
						<executions>
							<execution>
								<id>copy-graalvm-config-resources</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${c8tech.docker.context.directory}</outputDirectory>
									<encoding>UTF-8</encoding>
									<resources>
										<resource>
											<directory>${c8tech.docker.configDir}</directory>
											<targetPath>
												config/
											</targetPath>
											<filtering>false</filtering>
											<includes>
												<include>**/*</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>

				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>com.spotify</groupId>
							<artifactId>dockerfile-maven-plugin</artifactId>
							<version>${dockerfile-maven.version}</version>
							<configuration>
								<buildArgs combine.children="append">
									<GRAALVM_VERSION>${graalvm.image.tag}</GRAALVM_VERSION>
									<SOURCE_CONFIG_DIR>config</SOURCE_CONFIG_DIR>
								</buildArgs>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<profile>
			<id>build-docker-image-with-graalvm</id>
			<activation>
				<file>
					<exists>.c8tech.releng.docker</exists>
				</file>
				<property>
					<name>withGraalvm</name>
				</property>
			</activation>
			<properties>
				<c8tech.dockerfile.name>Dockerfile.graalvm</c8tech.dockerfile.name>
				<c8tech.docker.image.tag>${project.version}-graalvm</c8tech.docker.image.tag>
				<c8tech.docker.configDir></c8tech.docker.configDir>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>${maven-resources.version}</version>
						<executions>
							<execution>
								<id>copy-graalvm-resources</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${c8tech.docker.context.directory}</outputDirectory>
									<encoding>UTF-8</encoding>
									<resources>
										<resource>
											<directory>${c8tech.docker.configDir}</directory>
											<targetPath>
												config/
											</targetPath>
											<filtering>false</filtering>
											<includes>
												<include>**/*</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>

				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>com.spotify</groupId>
							<artifactId>dockerfile-maven-plugin</artifactId>
							<version>${dockerfile-maven.version}</version>
							<configuration>
								<buildArgs combine.children="append">
									<GRAALVM_VERSION>${graalvm.image.tag}</GRAALVM_VERSION>
									<APP_NATIVE_FILE>${project.artifactId}</APP_NATIVE_FILE>
									<APP_PROJECT_ID>${project.artifactId}</APP_PROJECT_ID>
									<APP_PROJECT_VERSION>${project.version}</APP_PROJECT_VERSION>
									<APP_BUILD_DATE>${build-date}</APP_BUILD_DATE>
									<SOURCE_CONFIG_DIR>config</SOURCE_CONFIG_DIR>
								</buildArgs>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<profile>
			<id>push-docker-image</id>
			<activation>
				<file>
					<exists>.c8tech.releng.docker</exists>
				</file>
				<property>
					<name>withDocker.push</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
						<version>${dockerfile-maven-version}</version>
						<executions>
							<execution>
								<id>pushing-to-registry</id>
								<goals>
									<goal>push</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>push-docker-registry-local</id>
			<activation>
				<file>
					<exists>.c8tech.releng.docker</exists>
				</file>
				<property>
					<name>!pushingToDocker.io</name>
				</property>
			</activation>
			<properties>
				<c8tech.docker.image.namespace>${c8tech.docker.registryAddress}/</c8tech.docker.image.namespace>
			</properties>
		</profile>
		<profile>
			<id>push-docker-io</id>
			<activation>
				<file>
					<exists>.c8tech.releng.docker</exists>
				</file>
				<property>
					<name>pushingToDocker.io</name>
				</property>
			</activation>
			<properties>
				<c8tech.docker.image.namespace>docker.io/${c8tech.docker.userid}/</c8tech.docker.image.namespace>
			</properties>
		</profile>

	</profiles>
</project>
